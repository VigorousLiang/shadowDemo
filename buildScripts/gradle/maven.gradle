apply plugin: 'maven-publish'

static def getDependencyNode(scope, groupId, artifactId, version) {
    Node node = new Node(null, 'dependency')
    node.appendNode('groupId', groupId)
    node.appendNode('artifactId', artifactId)
    node.appendNode('version', version)
    node.appendNode('scope', scope)
    return node
}

def gitShortRev() {
    def gitCommit = ""
    def proc = "git rev-parse --short HEAD".execute()
    proc.in.eachLine { line -> gitCommit = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    return gitCommit
}

def setScm(scm) {
    scm.appendNode('connection', 'https://github.com/Tencent/Shadow.git')

    def commit
    if ("${System.env.ORANGE}".equalsIgnoreCase("true")) {
        commit = "${System.env.ORANGE_COMMIT}"
    } else {
        commit = gitShortRev()
    }
    scm.appendNode('url', "https://github.com/Tencent/Shadow/commit/$commit")
}

def setGeneratePomFileAndDepends(publicationName) {
    model {
        tasks."generatePomFileFor${publicationName.capitalize()}Publication" {
            destination = file("$buildDir/pom/$publicationName-pom.xml")
        }
    }
}

def sourceJar(String name, String path) {
    return tasks.create("source${name.capitalize()}Jar", Jar) {
        group = "publishing"
        description = "package ${name} source to jar"
        from "$path/src/main/java"
        from "$path/src/main/kotlin"
        destinationDir = file("$path/build/libs/")
        classifier = 'sources'
    }
}
def publicationVersion = 1.0
def coreGroupId = 'com.tencent.shadow.core'
def corePath = '3rd-party/gradle-plugin'

publishing {
    publications {


        transformKit(MavenPublication) {
            groupId coreGroupId
            artifactId 'transform-kit'
            version publicationVersion
            artifact("$corePath/transform-kit/build/libs/transform-kit.jar")
            artifact sourceJar("transformKit", "$corePath/transform-kit")

            pom.withXml {
                def root = asNode()
                def dependencies = root.appendNode('dependencies')
                dependencies.append(getDependencyNode('compile', 'org.jetbrains.kotlin', 'kotlin-stdlib-jdk7', kotlin_version))
                dependencies.append(getDependencyNode('compile', 'com.android.tools.build', 'gradle', build_gradle_version))
                dependencies.append(getDependencyNode('compile', 'org.javassist', 'javassist', '3.22.0-GA'))

                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }

        transform(MavenPublication) {
            groupId coreGroupId
            artifactId 'transform'
            version publicationVersion
            artifact("$corePath/transform/build/libs/transform.jar")
            artifact sourceJar("transform", "$corePath/transform")

            pom.withXml {
                def root = asNode()
                def dependencies = root.appendNode('dependencies')
                dependencies.append(getDependencyNode('compile', coreGroupId, 'transform-kit', publicationVersion))

                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }

        gradlePlugin(MavenPublication) {
            groupId coreGroupId
            artifactId 'gradle-plugin'
            version publicationVersion
            artifact("$corePath/gradle-plugin/build/libs/gradle-plugin.jar")
            artifact sourceJar("gradlePlugin", "$corePath/gradle-plugin")

            pom.withXml {
                def root = asNode()
                def dependencies = root.appendNode('dependencies')
                dependencies.append(getDependencyNode('compile', 'org.jetbrains.kotlin', 'kotlin-stdlib-jdk7', kotlin_version))
                dependencies.append(getDependencyNode('compile', 'com.android.tools.build', 'gradle', build_gradle_version))
                dependencies.append(getDependencyNode('compile', coreGroupId, 'transform-kit', publicationVersion))
                dependencies.append(getDependencyNode('compile', coreGroupId, 'transform', publicationVersion))

                def scm = root.appendNode('scm')
                setScm(scm)
            }
        }
    }
    repositories {
        mavenLocal()
    }
}

setGeneratePomFileAndDepends('gradlePlugin')
setGeneratePomFileAndDepends('transformKit')
setGeneratePomFileAndDepends('transform')
